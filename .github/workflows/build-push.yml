name: Build and Push

on:
  pull_request:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io/${{ github.repository }}
  COSIGN_EXPERIMENTAL: "1"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - target: chainguard-jdk25-musl
          - target: chainguard-jdk25
          - target: chainguard-jdk26ea-musl
          - target: chainguard-jdk26ea
          - target: chainguard-jdk26valhalla-musl
          - target: chainguard-jdk26valhalla
          - target: distroless-jre25
          - target: distroless-jre25-musl
          - target: distroless-jre26ea
          - target: distroless-jre26ea-musl
          - target: distroless-jre26valhalla
          - target: distroless-jre26valhalla-musl
          - target: ubi9-jdk25
          - target: ubi9-jdk26ea
          - target: ubi9-jdk26valhalla
      fail-fast: false
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - uses: sigstore/cosign-installer@f713795cb21599bc4e5c4b58cbad1da852d7eeb9 # v3

      - name: Install security tooling
        run: |
          curl --fail --location --proto '=https' --tlsv1.3 --retry 3 --retry-delay 2 --silent --show-error \
            https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          curl --fail --location --proto '=https' --tlsv1.3 --retry 3 --retry-delay 2 --silent --show-error \
            https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
          curl --fail --location --proto '=https' --tlsv1.3 --retry 3 --retry-delay 2 --silent --show-error \
            https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Login to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            docker buildx bake ${{ matrix.target }} \
              --set *.args.SOURCE_DATE_EPOCH=$(date +%s) \
              --set *.cache-from=type=gha \
              --set *.cache-to=type=gha,mode=max \
              --push
          else
            # Extract build config from bake file
            TARGET="${{ matrix.target }}"
            CONFIG=$(docker buildx bake $TARGET --print)
            DOCKERFILE=$(echo "$CONFIG" | jq -r '.target["'$TARGET'"].dockerfile')
            TAGS=$(echo "$CONFIG" | jq -r '.target["'$TARGET'"].tags[0]')

            # Extract build args (excluding SOURCE_DATE_EPOCH which we'll override)
            BUILDX_ARGS=$(echo "$CONFIG" | jq -r '.target["'$TARGET'"].args | del(.SOURCE_DATE_EPOCH) | to_entries[] | "--build-arg \(.key)=\(.value)"' | tr '\n' ' ')

            docker buildx build \
              --file "$DOCKERFILE" \
              --platform linux/amd64 \
              --tag "$TAGS" \
              --cache-from type=gha \
              --build-arg SOURCE_DATE_EPOCH=$(date +%s) \
              $BUILDX_ARGS \
              --load \
              .
          fi

      - name: Test health check
        if: github.event_name == 'pull_request'
        run: |
          IMAGE_REF="${REGISTRY}:${{ matrix.target }}"

          # Test 1: Run health check (works for all non-distroless images)
          echo "Testing health check functionality..."
          if [[ "${{ matrix.target }}" == distroless-* ]]; then
            # Distroless: Just verify java works (no shell available)
            docker run --rm "$IMAGE_REF" java -version
            echo "✅ Distroless JVM verification passed"
          else
            # Other images: Test health check script directly
            # Note: Use /bin/sh from image (Chainguard has busybox sh, UBI9 has bash)
            docker run --rm -e HEALTH_CHECK_MODE=jvm "$IMAGE_REF" /usr/local/bin/health-check.sh
            echo "✅ Health check script executed successfully"
          fi

          # Test 2: Verify OCI security labels
          echo "Verifying security labels..."
          CAPS=$(docker inspect "$IMAGE_REF" --format='{{index .Config.Labels "org.opencontainers.image.security.capabilities"}}')
          ROOTFS=$(docker inspect "$IMAGE_REF" --format='{{index .Config.Labels "org.opencontainers.image.security.readonly-rootfs"}}')
          SECCOMP=$(docker inspect "$IMAGE_REF" --format='{{index .Config.Labels "org.opencontainers.image.security.seccomp"}}')

          if [[ "$CAPS" == "NONE" && "$ROOTFS" == "recommended" && "$SECCOMP" == *"seccomp-java.json"* ]]; then
            echo "✅ Security labels verified (caps=$CAPS, rootfs=$ROOTFS, seccomp=$SECCOMP)"
          else
            echo "❌ Security labels missing or incorrect"
            echo "  capabilities: $CAPS (expected: NONE)"
            echo "  readonly-rootfs: $ROOTFS (expected: recommended)"
            echo "  seccomp: $SECCOMP (expected: *seccomp-java.json*)"
            exit 1
          fi

          # Test 3: Verify HEALTHCHECK instruction (non-distroless only)
          if [[ "${{ matrix.target }}" != distroless-* ]]; then
            echo "Verifying HEALTHCHECK instruction..."
            HEALTHCHECK=$(docker inspect "$IMAGE_REF" --format='{{json .Config.Healthcheck}}')
            if echo "$HEALTHCHECK" | grep -q "health-check.sh"; then
              echo "✅ HEALTHCHECK instruction verified"
            else
              echo "❌ HEALTHCHECK instruction missing or incorrect: $HEALTHCHECK"
              exit 1
            fi
          fi

          echo "🎉 All health check and security tests passed for ${{ matrix.target }}"

      - name: Generate SBOM
        run: |
          mkdir -p sbom
          IMAGE_REF="${REGISTRY}:${{ matrix.target }}"
          syft ${IMAGE_REF} -o cyclonedx-json > sbom/${{ matrix.target }}.cdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: sbom-${{ matrix.target }}
          path: sbom/${{ matrix.target }}.cdx.json

      - name: Scan (Trivy)
        run: |
          IMAGE_REF="${REGISTRY}:${{ matrix.target }}"
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${IMAGE_REF}

      - name: Scan (Grype)
        run: |
          IMAGE_REF="${REGISTRY}:${{ matrix.target }}"
          grype ${IMAGE_REF}

      - name: Sign image
        if: github.event_name == 'push'
        run: cosign sign --yes $REGISTRY:${{ matrix.target }}

      - name: Attest SBOM
        if: github.event_name == 'push'
        run: cosign attest --yes --predicate sbom/${{ matrix.target }}.cdx.json --type cyclonedx $REGISTRY:${{ matrix.target }}

  summary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Build Matrix Complete ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All 15 container image variants built and scanned successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
